What happens when you initialize a repository? Why do you need to do it?

  Git adds an hidden metadata folder called ".git" but don't make any initial
  commit.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

  It is only a temporary space used before committing, allowing user to custom
  contents to commit.

How can you use the staging area to make sure you have one commit per logical
change?

  By adding my working directory modifications to the staging area using the
  "git add" command. Then "git diff --staged" displays difference between
  staging area and last commit.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

  Branches would be helpful for adding progressively experimental features or
  translations. Branches help by making those modification without impacting
  initial project yet, i.e. the master branch.

How do the diagrams help you visualize the branch structure?

  By graphically display branches with their names, and related commits ordered
  chronologically into it.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

  When merging branches together, Git automatically determines which parts of
  code have been added and which ones have been deleted, using a built-in
  strategy called "recursive". We have to represent the diagram manually cause
  Git automatically sort merged commit by timestamps, so parent commits are not
  visible anymore.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?

  Pros:
  - procedurial and so fast merging unless two people edit the same code
  - generate commit message with files implied in a conflict
  Cons:
  - When two people edit the same code, it makes a conflict
  - Git does not have experience on the project so it can not solve
  conflicts
  - You have to trust what Git is doing
  
